<?xml version="1.0" encoding="UTF-8"?>
<configuration xmlns="http://eobjects.org/analyzerbeans/configuration/1.0">

	<configuration-metadata>
		<configuration-name>DataCleaner configuration</configuration-name>
		<configuration-description>Configures DataCleaner's initial
			environment.
			This includes example datastores and example reference
			data.
		</configuration-description>
		<configuration-version>4.0</configuration-version>
		<author>DataCleaner.org</author>
	</configuration-metadata>

	<datastore-catalog>
		<jdbc-datastore name="orderdb"
			description="Example database for use with DataCleaner">
			<url>jdbc:hsqldb:res:orderdb;readonly=true</url>
			<driver>org.hsqldb.jdbcDriver</driver>
			<username>SA</username>
			<password></password>
		</jdbc-datastore>

		<salesforce-datastore name="Salesforce.com"
			description="Example connection to SFDC - credentials not provided">
			<username>username</username>
			<password>password</password>
			<security-token>token</security-token>
		</salesforce-datastore>

		<csv-datastore name="Customers"
			description="Example CSV-file with representing customers' details">
			<filename>datastores/customers.csv</filename>
			<encoding>UTF8</encoding>
			<quote-char>"</quote-char>
			<separator-char>,</separator-char>
		</csv-datastore>

	</datastore-catalog>

	<reference-data-catalog>
		<dictionaries>
		</dictionaries>
		<synonym-catalogs>
			<text-file-synonym-catalog name="Job titles"
				description="Example synonym catalog used for standardizing job titles">
				<filename>datastores/job_title_synonyms.txt</filename>
				<encoding>UTF8</encoding>
				<case-sensitive>false</case-sensitive>
			</text-file-synonym-catalog>
		</synonym-catalogs>
		<string-patterns>
			<regex-pattern name="Danish postal code">
				<expression>^(DK(-| )?)?[0-9]{4}$</expression>
			</regex-pattern>
			<regex-pattern name="Danish phone number">
				<expression>^(\(?\Q+45\E\)?( )?)?[0-9]{8}$</expression>
			</regex-pattern>
			<regex-pattern name="Website URL">
				<expression>^https?://[a-z0-9_-][\.[a-z0-9_-]]*\.(com|edu|org|net|int|info|eu|biz|mil|gov|aero|travel|pro|name|museum|coop|asia|[a-z][a-z])+(:[0-9]+)?[/[a-zA-Z0-9\._#-]]*/?$
				</expression>
			</regex-pattern>
			<regex-pattern name="Typical username">
				<expression>[a-zA-Z0-9_]{3,16}</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (JCB)" description="JCB Credit Card number">
				<expression>^(?:2131|1800|35\d{3})\d{11}$</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (Diners Club)"
				description="Diners Club Credit Card number.">
				<expression>^3(?:0[0-5]|[68][0-9])[0-9]{11}$</expression>
			</regex-pattern>
			<regex-pattern name="24 Hour Time (hh:mm)"
				description="Validates a time field with 24 (0-23) hours.">
				<expression>^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$
				</expression>
			</regex-pattern>
			<regex-pattern name="ISO date (yyyy-mm-dd)">
				<expression>^((((19|20)(([02468][048])|([13579][26]))-02-29))|((20[0-9][0-9])|(19[0-9][0-9]))-((((0[1-9])|(1[0-2]))-((0[1-9])|(1[[0-9]])|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$
				</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (Discover)"
				description="Discover Credit Card numbers.">
				<expression>^6(?:011|5[0-9]{2})[0-9]{12}$</expression>
			</regex-pattern>
			<regex-pattern name="German postal code" description="Quite simple - it's five digits.">
				<expression>^[0-9]{5}$</expression>
			</regex-pattern>
			<regex-pattern name="Integer or rounded decimal">
				<expression>^[-+]?[1-9][[0-9]]*\.?[0]*$</expression>
			</regex-pattern>
			<regex-pattern name="UK Phone Number" description="Phone numbers for United Kingdom.">
				<expression>^(\+44[[:space:]]?7[[:digit:]]{3}|\(?07[[:digit:]]{3}\)?)[[:space:]]?[[:digit:]]{3}[[:space:]]?[[:digit:]]{3}$
				</expression>
			</regex-pattern>
			<regex-pattern name="FR Postal Code"
				description="Postal code for France / French cities.">
				<expression>^(0[1-9]|[1-9][0-9])[0-9]{3}$</expression>
			</regex-pattern>
			<regex-pattern name="BE Postal Code"
				description="Postal codes for Belgium / Belgian cities">
				<expression>^(F-[0-9]{4,5}|B-[0-9]{4})$</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (Visa)" description="Visa Credit Card number.">
				<expression>^4[0-9]{12}(?:[0-9]{3})?$</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (any)" description="Any Credit Card number.">
				<expression>^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$
				</expression>
			</regex-pattern>
			<regex-pattern name="Indian vehicle reg. number"
				description="It validates Indian Vehicle Registration Number.">
				<expression>^([A-Z|a-z]{2}\s{1}\d{2}\s{1}[A-Z|a-z]{1,2}\s{1}\d{1,4})?([A-Z|a-z]{3}\s{1}\d{1,4})?$
				</expression>
			</regex-pattern>
			<regex-pattern name="linux/unix network devices">
				<expression>^eth[0-9]+$</expression>
			</regex-pattern>
			<regex-pattern name="MAC address"
				description="Matches a MAC address of a network device.">
				<expression>^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$
				</expression>
			</regex-pattern>
			<regex-pattern name="IPv4 address" description="Validates an IPv4 address">
				<expression>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b</expression>
			</regex-pattern>
			<regex-pattern name="Dutch Postal Code">
				<expression>^\s*?[0-9]{4}\s?[a-z|A-Z]{2}\s*?$</expression>
			</regex-pattern>
			<regex-pattern name="DISCO 88" description="Danish version of ISCO 88.">
				<expression>\d{4}|110</expression>
			</regex-pattern>
			<regex-pattern name="DISCO AMS">
				<expression>\d{7}|110(001|101|102)</expression>
			</regex-pattern>
			<regex-pattern name="Danish Car registrationnumber"
				description="">
				<expression>^[a-z|A-Z]{2}[1-9]\d{4}$</expression>
			</regex-pattern>
			<regex-pattern name="ITA Post Code" description="Italian Postal Code">
				<expression>^[0-9]{5}$</expression>
			</regex-pattern>
			<regex-pattern name="Java class name">
				<expression>^(([a-z])+.)+[A-Z]([A-Za-z])+$</expression>
			</regex-pattern>
			<regex-pattern name="Integer">
				<expression>^[-+]?[1-9][[0-9]]*$</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (MasterCard)"
				description="!MasterCard Credit Card number.">
				<expression>^5[1-5][0-9]{14}$</expression>
			</regex-pattern>
			<regex-pattern name="Month number (01-12)">
				<expression>^((0[1-9])|(1[0-2]))$</expression>
			</regex-pattern>
			<regex-pattern name="Credit Card (American Express)"
				description="American Express Credit Card number.">
				<expression>^3[47][0-9]{13}$</expression>
			</regex-pattern>
			<regex-pattern name="US Social Security Number"
				description="US / American social security number regex.">
				<expression>^([[:digit:]]{3}[
					-][[:digit:]]{2}[-][[:digit:]]{4}|[[:digit:]]{9})$
				</expression>
			</regex-pattern>
			<regex-pattern name="Week day">
				<expression>^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$
				</expression>
			</regex-pattern>
			<regex-pattern name="DE Postal Code"
				description="Postal codes for Germany / German cities.">
				<expression>^(D\-)?[0-9]{5}$</expression>
			</regex-pattern>
			<regex-pattern name="Email address">
				<expression>[a-zA-Z0-9._%+-]*@[a-zA-Z0-9._%+-]*\.[a-zA-Z]{2,4}
				</expression>
			</regex-pattern>
			<regex-pattern name="MD5 hash">
				<expression>^([a-f0-9]{32})$</expression>
			</regex-pattern>
			<regex-pattern name="ID CARD of China" description="identity card of China">
				<expression>\d{15}|\d{18}</expression>
			</regex-pattern>
			<regex-pattern name="Danish CPR number">
				<expression>^(0[1-9]|[12]\d|3[01])((0[1-9])|(1[0-2]))[0-9]{2}(\Q-\E)?[0-9]{4}$
				</expression>
			</regex-pattern>
			<regex-pattern name="Day number (01-31)">
				<expression>^(((0)[1-9])|((1|2)[0-9])|(3[0-1]))$</expression>
			</regex-pattern>
			<regex-pattern name="italian fixed phone numbers"
				description="geographic phone numbers">
				<expression>(\+|00)?+\s*+(39|\(39\))+\s*+0+[1-9]{1}+[0-9]{0,1,2}+\s*+[0-9]{6,10}
				</expression>
			</regex-pattern>
			<regex-pattern name="Italy Cell Phone" description="for client numbers only">
				<expression>^((\+|00)?+(\s)*+(39|\(39\))?+(/s)*+((38[3,8,9,0])|(39[1-3])|(34[0,3,7-9])|(36[0,3,6,8])|(33[0,1,
					3-9])|(32[0,4,7-9]))(/s)*([0-9]{6,7}))?$
				</expression>
			</regex-pattern>
			<regex-pattern
				name="Duplicate works (Ignores content between &lt;style&gt; and &lt;script&gt; tags)">
				<expression>\b((?!(((?!&lt;(\w|/|\?)).)+?((?&lt;!\?)&gt;|&lt;/script&gt;|&lt;/style&gt;)))[a-zA-Z]{2,})\s+\1\b
				</expression>
			</regex-pattern>
		</string-patterns>
	</reference-data-catalog>

</configuration>
